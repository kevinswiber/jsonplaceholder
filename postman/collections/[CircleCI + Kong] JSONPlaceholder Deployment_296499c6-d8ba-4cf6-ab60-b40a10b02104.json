{
    "info": {
        "_postman_id": "b66f14c7-b43e-4e16-9ca6-f550f059799f",
        "name": "[CircleCI + Kong] Deployment",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Initialize",
            "item": [
                {
                    "name": "Get OpenAPI Definition",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "6d471495-bdea-4ddc-9920-bdd7e8758b29",
                                "exec": [
                                    "pm.test('status code is 200', () => {",
                                    "  pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "const response = pm.response.json();",
                                    "",
                                    "pm.test('response has schema', () => {",
                                    "  pm.expect(response.schema.schema).to.exist;",
                                    "});",
                                    "",
                                    "pm.collectionVariables.set('openapi', JSON.stringify(response.schema.schema));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "7f603fc9-1775-481a-abab-338148732639",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "X-API-Key",
                                "value": "{{postmanAPIKey}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}",
                            "protocol": "https",
                            "host": [
                                "api",
                                "getpostman",
                                "com"
                            ],
                            "path": [
                                "apis",
                                "{{apiId}}",
                                "versions",
                                "{{apiVersionId}}",
                                "schemas",
                                "{{schemaId}}"
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "id": "e5bbb7e7-4f97-4d8d-b3ef-96c8c68ebeac",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "ba37f1f7-cf03-4cf2-b0c3-ad80c3f57166",
                        "type": "text/javascript",
                        "exec": [
                            "const requiredVariables = [",
                            "  'kubeBaseUrl',",
                            "  'o2kBaseUrl',",
                            "  'apiId',",
                            "  'apiVersionId',",
                            "  'schemaId',",
                            "  'postmanAPIKey'",
                            "];",
                            "",
                            "const missingVars = requiredVariables.filter((item) => {",
                            "  const v = pm.variables.get(item);",
                            "  return !v || v[0] === '<';",
                            "});",
                            "",
                            "if (missingVars.length) {",
                            "  const message = [",
                            "    `The following variables are required: ${missingVars.join(', ')}.`,",
                            "    'They can be set under the Variables tab of the Collection.'",
                            "  ].join(' ');",
                            "",
                            "  throw new Error(message);",
                            "}",
                            "",
                            "const resetVars = [",
                            "  'openapi',",
                            "  'kongKubernetesResources',",
                            "  'findResourceDefinitionIndex',",
                            "  'currentKubeAPIResource',",
                            "  'currentKubeResource'",
                            "]",
                            "",
                            "for (const item of resetVars) {",
                            "  pm.collectionVariables.set(item, '');",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "ae720045-3e34-404f-ba58-1f4dc868d553",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Run",
            "item": [
                {
                    "name": "OpenAPI to Kong",
                    "item": [
                        {
                            "name": "Convert OpenAPI to Kong Config",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "b5bcdb62-c5a1-40ee-bba7-b83a8a200be6",
                                        "exec": [
                                            "const openapi = pm.variables.get('openapi');",
                                            "",
                                            "if (openapi) {",
                                            "  pm.variables.set('openapi', JSON.parse(openapi));",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "77b47414-a5b2-43ce-a3e4-756ad38091a7",
                                        "exec": [
                                            "pm.test('status code is 200', () => {",
                                            "  pm.response.to.have.status(200);",
                                            "});",
                                            "",
                                            "const response = pm.response.json();",
                                            "",
                                            "pm.test('response has length', () => {",
                                            "  pm.expect(response.length).to.be.gt(0);",
                                            "});",
                                            "",
                                            "pm.test('response is JSON', () => {",
                                            "  pm.expect(pm.response.headers.get('Content-Type')).to.match(/^application\\/json/);",
                                            "});",
                                            "",
                                            "pm.collectionVariables.set('kongKubernetesResources', JSON.stringify(response));"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "d498be89-5265-4a1b-8a1d-7c4022cbfc5b",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "text/yaml",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{{openapi}}",
                                    "options": {
                                        "raw": {
                                            "language": "text"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{o2kBaseUrl}}/converter",
                                    "host": [
                                        "{{o2kBaseUrl}}"
                                    ],
                                    "path": [
                                        "converter"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "58207477-43ca-45a3-b3eb-4d9e8faccf73",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "3bb383cc-be7b-44fc-b7c3-b4c5f446ebce",
                                "type": "text/javascript",
                                "exec": [
                                    "if (!pm.variables.get('openapi')) {",
                                    "  const message = [",
                                    "    `The following variable is required: openapi.`,",
                                    "    'It can be set under the Variables tab of the Collection',",
                                    "    'or by running the \"Initialize/Get Open API Definition\" request.'",
                                    "  ].join(' ');",
                                    "  ",
                                    "  throw new Error(message);",
                                    "}"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "9177c44d-64b7-494d-8fd1-b9ea310107d9",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Kubernetes",
                    "item": [
                        {
                            "name": "Find Resource Definition",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "5853ccdd-067e-479d-839e-5fabf3749bbe",
                                        "exec": [
                                            "const resourcesVar = pm.variables.get('kongKubernetesResources');",
                                            "const indexVar = pm.variables.get('findResourceDefinitionIndex') || '0';",
                                            "",
                                            "if (!resourcesVar) {",
                                            "  throw new Error([",
                                            "    'The following variable is required: kongKubernetesResources.',",
                                            "    'Run the \"OpenAPI to Kong/Convert OpenAPI to Kong Config\" request',",
                                            "    'to populate the variable.'",
                                            "  ].join(' '));",
                                            "}",
                                            "",
                                            "const resources = JSON.parse(resourcesVar);",
                                            "const index = Number(indexVar);",
                                            "const resource = resources[index];",
                                            "pm.variables.set('apiGroupVersion', resource.apiVersion);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "11e9bbfa-4c40-4b88-a17c-45553e4c83df",
                                        "exec": [
                                            "pm.test('status code is 200', () => {",
                                            "  pm.response.to.have.status(200);",
                                            "});",
                                            "",
                                            "const resources = JSON.parse(pm.variables.get('kongKubernetesResources'));",
                                            "const index = Number(pm.variables.get('findResourceDefinitionIndex'));",
                                            "",
                                            "const resource = resources[index];",
                                            "const group = pm.response.json();",
                                            "",
                                            "const kubeAPIResource = group.resources.find((item) => {",
                                            "  return item.kind === resource.kind; ",
                                            "});",
                                            "",
                                            "if (!kubeAPIResource) {",
                                            "  throw new Error(`Resource ${resource.kind} isn't available on your Kubernetes API Server.`)",
                                            "}",
                                            "",
                                            "pm.collectionVariables.set('currentKubeAPIResource', JSON.stringify(kubeAPIResource));",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "35e83b19-29e3-4de1-bd95-6bbc8a560529",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{kubeBaseUrl}}/apis/{{apiGroupVersion}}",
                                    "host": [
                                        "{{kubeBaseUrl}}"
                                    ],
                                    "path": [
                                        "apis",
                                        "{{apiGroupVersion}}"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Fetch Resource List",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "8ec0a067-9d1e-4d1e-8b3b-2edf8882f406",
                                        "exec": [
                                            "pm.test('status code is 200', () => {",
                                            "  pm.response.to.have.status(200);",
                                            "});",
                                            "",
                                            "const index = Number(pm.variables.get('findResourceDefinitionIndex'));",
                                            "",
                                            "const resources = JSON.parse(pm.variables.get('kongKubernetesResources'));",
                                            "const resource = resources[index];",
                                            "const group = pm.response.json();",
                                            "",
                                            "const found = group.items.find((item) => {",
                                            "  return item.metadata.name === resource.metadata.name;",
                                            "});",
                                            "",
                                            "if (found) {",
                                            "  pm.collectionVariables.set('currentKubeResource', JSON.stringify(found));",
                                            "  postman.setNextRequest('Update Kubernetes Resource');",
                                            "} else {",
                                            "  pm.collectionVariables.set('currentKubeResource', '');",
                                            "  postman.setNextRequest('Create Kubernetes Resource');",
                                            "}",
                                            "",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "1eac2284-bd26-4629-bf7d-10cbd4a58469",
                                        "exec": [
                                            "const resourcesVar = pm.variables.get('kongKubernetesResources');",
                                            "const indexVar = pm.variables.get('findResourceDefinitionIndex') || '0';",
                                            "",
                                            "if (!resourcesVar) {",
                                            "  throw new Error([",
                                            "    'The following variable is required: kongKubernetesResources.',",
                                            "    'Run the \"OpenAPI to Kong/Convert OpenAPI to Kong Config\" request',",
                                            "    'to populate the variable.'",
                                            "  ].join(' '));",
                                            "}",
                                            "",
                                            "const kubeAPIResourceVar = pm.collectionVariables.get('currentKubeAPIResource');",
                                            "",
                                            "if (!kubeAPIResourceVar) {",
                                            "  throw new Error([",
                                            "    'A Kubernetes APIResource has not been set.',",
                                            "    'Use the \"Run/Find Resource Definition\" request to set the variable.'",
                                            "  ].join(' '));",
                                            "}",
                                            "const kubeAPIResource = JSON.parse(kubeAPIResourceVar);",
                                            "",
                                            "const index = Number(indexVar);",
                                            "const resources = JSON.parse(pm.variables.get('kongKubernetesResources'));",
                                            "const resource = resources[index];",
                                            "",
                                            "let resourceListPath = `${resource.apiVersion}`;",
                                            "if (kubeAPIResource.namespaced) {",
                                            "  const namespace = pm.variables.get('kubeNamespace') || 'default';",
                                            "  resourceListPath += `/namespaces/${namespace}`;",
                                            "}",
                                            "resourceListPath += `/${kubeAPIResource.name}`;",
                                            "pm.variables.set('resourceListPath', resourceListPath);",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "1cdd7609-ec13-463e-ac41-fae691f6302e",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{kubeBaseUrl}}/apis/{{resourceListPath}}",
                                    "host": [
                                        "{{kubeBaseUrl}}"
                                    ],
                                    "path": [
                                        "apis",
                                        "{{resourceListPath}}"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Create Kubernetes Resource",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "e5a3757e-ee3b-4300-995d-2ba25081b2e9",
                                        "exec": [
                                            "const kubeAPIResourceVar = pm.collectionVariables.get('currentKubeAPIResource');",
                                            "",
                                            "if (!kubeAPIResourceVar) {",
                                            "  throw new Error([",
                                            "    'A Kubernetes APIResource has not been set.',",
                                            "    'Use the \"Run/Find Resource Definition\" request to set the variable.'",
                                            "  ].join(' '));",
                                            "}",
                                            "const kubeAPIResource = JSON.parse(kubeAPIResourceVar);",
                                            "",
                                            "let indexVar = pm.variables.get('findResourceDefinitionIndex');",
                                            "if (!indexVar) {",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', '0');",
                                            "  indexVar = '0';",
                                            "}",
                                            "",
                                            "const index = Number(indexVar);",
                                            "const resources = JSON.parse(pm.variables.get('kongKubernetesResources'));",
                                            "const resource = resources[index];",
                                            "",
                                            "if (index >= resources.length) {",
                                            "  throw new Error('Index is greater than the number of Kubernetes resources.  Consider resetting it to 0 in the collection variables.')",
                                            "}",
                                            "",
                                            "let resourcePath = `${resource.apiVersion}`;",
                                            "if (kubeAPIResource.namespaced) {",
                                            "  const namespace = resource.metadata.namespace ",
                                            "    || pm.variables.get('kubeNamespace')",
                                            "    || 'default';",
                                            "  resourcePath += `/namespaces/${namespace}`;",
                                            "}",
                                            "resourcePath += `/${kubeAPIResource.name}`;",
                                            "",
                                            "pm.variables.set('resourcePath', resourcePath);",
                                            "pm.variables.set('resource', JSON.stringify(resource));",
                                            "pm.collectionVariables.set('currentKubeAPIResource', '');",
                                            "pm.collectionVariables.set('currentKubeResource', '');",
                                            "",
                                            "if (index === resources.length - 1) {",
                                            "  postman.setNextRequest(null);",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', '0');",
                                            "} else {",
                                            "  postman.setNextRequest('Find Resource Definition');",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', String(index+1));",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "b368f95c-712f-4dcb-a4d0-b0a977269539",
                                        "exec": [
                                            "pm.test('status code is 201', () => {",
                                            "  pm.response.to.have.status(201);",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "8bf88095-8649-48e8-b9d7-d95cd77f2808",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{{resource}}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{kubeBaseUrl}}/apis/{{resourcePath}}",
                                    "host": [
                                        "{{kubeBaseUrl}}"
                                    ],
                                    "path": [
                                        "apis",
                                        "{{resourcePath}}"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Kubernetes Resource",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "ecd5dff8-f1bc-48ea-8293-9123e1af8327",
                                        "exec": [
                                            "new Function(pm.variables.get('jsonMergePatch'))();",
                                            "const kubeAPIResourceVar = pm.collectionVariables.get('currentKubeAPIResource');",
                                            "",
                                            "if (!kubeAPIResourceVar) {",
                                            "  throw new Error([",
                                            "    'A Kubernetes APIResource has not been set.',",
                                            "    'Use the \"Run/Find Resource Definition\" request to set the variable.'",
                                            "  ].join(' '));",
                                            "}",
                                            "const kubeAPIResource = JSON.parse(kubeAPIResourceVar);",
                                            "",
                                            "let indexVar = pm.variables.get('findResourceDefinitionIndex');",
                                            "if (!indexVar) {",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', '0');",
                                            "  indexVar = '0';",
                                            "}",
                                            "",
                                            "const index = Number(indexVar);",
                                            "const resources = JSON.parse(pm.variables.get('kongKubernetesResources'));",
                                            "let resource = resources[index];",
                                            "",
                                            "let resourcePath = `${resource.apiVersion}`;",
                                            "if (kubeAPIResource.namespaced) {",
                                            "  const namespace = resource.metadata.namespace ",
                                            "    || pm.variables.get('kubeNamespace')",
                                            "    || 'default';",
                                            "  resourcePath += `/namespaces/${namespace}`;",
                                            "}",
                                            "resourcePath += `/${kubeAPIResource.name}/${resource.metadata.name}`;",
                                            "resource = jsonmergepatch.apply(resource, JSON.parse(pm.variables.get('currentKubeResource')));",
                                            "",
                                            "pm.request.addHeader('Content-Type: application/merge-patch+json');",
                                            "pm.variables.set('resourcePath', resourcePath);",
                                            "pm.variables.set('resource', JSON.stringify(resource));",
                                            "pm.collectionVariables.set('currentKubeAPIResource', '');",
                                            "pm.collectionVariables.set('currentKubeResource', '');",
                                            "",
                                            "if (index === resources.length - 1) {",
                                            "  postman.setNextRequest(null);",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', '0');",
                                            "} else {",
                                            "  postman.setNextRequest('Find Resource Definition');",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', String(index+1));",
                                            "}",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "cf8f4586-8db3-4536-8f42-0d8c491cc3ec",
                                        "exec": [
                                            "pm.test('status code is 200', () => {",
                                            "  pm.response.to.have.status(200);",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "b7875537-ba73-436d-8a9b-dc4df9df9472",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "PATCH",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{{resource}}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{kubeBaseUrl}}/apis/{{resourcePath}}",
                                    "host": [
                                        "{{kubeBaseUrl}}"
                                    ],
                                    "path": [
                                        "apis",
                                        "{{resourcePath}}"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "793b6226-c025-4b71-ab37-2ceac5a0829d",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "233b3dca-bd0d-4f5c-9327-b5390d174f0b",
                                "type": "text/javascript",
                                "exec": [
                                    "const token = pm.variables.get('token');",
                                    "if (token) {",
                                    "  pm.request.addHeader(`Authorization: Bearer ${token}`);",
                                    "}"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "8fd3b281-b9a9-4c30-98d1-0fac00219876",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        }
                    ]
                }
            ],
            "id": "ee319657-77d7-45e4-98fd-f23b377cd16f"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "id": "8593b07d-dad4-4294-b5e5-d86441109473",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "id": "f66f1fc2-ead5-455a-a0a4-3fc0ceb9ed41",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "variable": [
        {
            "id": "86f370e1-34ea-438f-bdea-165d130dc079",
            "key": "kubeBaseUrl",
            "value": "https://kubernetes.default.svc"
        },
        {
            "id": "23d197c7-7b1a-4c43-9241-9facbf7bfb48",
            "key": "kubeNamespace",
            "value": "default"
        },
        {
            "id": "d9021c7a-8ce0-40ea-9d62-faaa87f39856",
            "key": "o2kBaseUrl",
            "value": "http://localhost:3001"
        },
        {
            "id": "c4e616f1-b489-491e-8635-107bdb22c67a",
            "key": "apiId",
            "value": "<<Only needed in Postman app, not Newman>>"
        },
        {
            "id": "93525d90-1303-4e56-96bf-4b1063c70e1b",
            "key": "apiVersionId",
            "value": "<<Only needed in Postman app, not Newman>>"
        },
        {
            "id": "7b29caa4-6689-4beb-8136-e14d5169b0db",
            "key": "schemaId",
            "value": "<<Only needed in Postman app, not Newman>>"
        },
        {
            "id": "f5f851d9-6b30-4bcb-9259-61ccf215be85",
            "key": "postmanAPIKey",
            "value": "<<Only needed in Postman app, not Newman>>"
        },
        {
            "id": "1b677068-45be-4b6e-84d7-e9cff722aafa",
            "key": "openapi",
            "value": "<<Set automatically in Postman app>> "
        },
        {
            "id": "6efdf106-f3e9-4146-a8c1-88240abecc4c",
            "key": "kongKubernetesResources",
            "value": "{}"
        },
        {
            "id": "e17611cb-6558-4509-8268-005998719eb8",
            "key": "jsonMergePatch",
            "value": "(()=>{var r={10:(r,e,t)=>{\"use strict\";r.exports.apply=t(774),r.exports.generate=t(811),r.exports.merge=t(302)},774:(r,e,t)=>{\"use strict\";var o=t(988).q;r.exports=function r(e,t){if(null===(t=o(t))||\"object\"!=typeof t||Array.isArray(t))return t;(null===(e=o(e))||\"object\"!=typeof e||Array.isArray(e))&&(e={});for(var n=Object.keys(t),u=0;u<n.length;u++){var f=n[u];if(\"__proto__\"===f||\"constructor\"===f||\"prototype\"===f)return e;null===t[f]?e.hasOwnProperty(f)&&delete e[f]:e[f]=r(e[f],t[f])}return e}},811:(r,e,t)=>{\"use strict\";var o=t(63),n=t(988).q;r.exports=function r(e,t){if(e=n(e),t=n(t),null===e||null===t||\"object\"!=typeof e||\"object\"!=typeof t||Array.isArray(e)!==Array.isArray(t))return t;if(Array.isArray(e))return function(r,e){if(r.length!==e.length)return!1;for(var t=0;t<r.length;t++)if(!o(e[t],r[t]))return!1;return!0}(e,t)?void 0:t;var u,f,i={},s=Object.keys(e),c=Object.keys(t),a={};for(f=0;f<c.length;f++)u=c[f],-1===s.indexOf(u)&&(a[u]=!0,i[u]=n(t[u]));var l={};for(f=0;f<s.length;f++)if(u=s[f],-1===c.indexOf(u))l[u]=!0,i[u]=null;else if(null!==e[u]&&\"object\"==typeof e[u]){var y=r(e[u],t[u]);void 0!==y&&(i[u]=y)}else e[u]!==t[u]&&(i[u]=n(t[u]));return Object.keys(i).length>0?i:void 0}},302:r=>{\"use strict\";r.exports=function r(e,t){if(null===e||null===t||\"object\"!=typeof e||\"object\"!=typeof t||Array.isArray(e)!==Array.isArray(t))return t;var o=JSON.parse(JSON.stringify(e));return Object.keys(t).forEach((function(n){void 0!==e[n]?o[n]=r(e[n],t[n]):o[n]=t[n]})),o}},988:r=>{\"use strict\";r.exports.q=function(r){return r&&\"function\"==typeof r.toJSON?r.toJSON():r}},63:r=>{\"use strict\";r.exports=function r(e,t){if(e===t)return!0;if(e&&t&&\"object\"==typeof e&&\"object\"==typeof t){if(e.constructor!==t.constructor)return!1;var o,n,u;if(Array.isArray(e)){if((o=e.length)!=t.length)return!1;for(n=o;0!=n--;)if(!r(e[n],t[n]))return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();if((o=(u=Object.keys(e)).length)!==Object.keys(t).length)return!1;for(n=o;0!=n--;)if(!Object.prototype.hasOwnProperty.call(t,u[n]))return!1;for(n=o;0!=n--;){var f=u[n];if(!r(e[f],t[f]))return!1}return!0}return e!=e&&t!=t}}},e={},t=function t(o){var n=e[o];if(void 0!==n)return n.exports;var u=e[o]={exports:{}};return r[o](u,u.exports,t),u.exports}(10),o=jsonmergepatch=\"undefined\"==typeof jsonmergepatch?{}:jsonmergepatch;for(var n in t)o[n]=t[n];t.__esModule&&Object.defineProperty(o,\"__esModule\",{value:!0})})();"
        },
        {
            "id": "152cf3d7-347e-49b6-bca0-a0a71705f891",
            "key": "findResourceDefinitionIndex",
            "value": "0"
        },
        {
            "id": "b530c9a8-fdbf-44dd-8b05-86925a6a91ff",
            "key": "currentKubeAPIResource",
            "value": ""
        },
        {
            "id": "7cb5a6be-affc-467e-a742-a042750f3aab",
            "key": "currentKubeResource",
            "value": ""
        }
    ]
}