{
    "info": {
        "_postman_id": "b66f14c7-b43e-4e16-9ca6-f550f059799f",
        "name": "[CircleCI + Kong] Deployment",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Initialize",
            "item": [
                {
                    "name": "Get OpenAPI Definition",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "6d471495-bdea-4ddc-9920-bdd7e8758b29",
                                "exec": [
                                    "pm.test('status code is 200', () => {",
                                    "  pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "const response = pm.response.json();",
                                    "",
                                    "pm.test('response has schema', () => {",
                                    "  pm.expect(response.schema.schema).to.exist;",
                                    "});",
                                    "",
                                    "pm.collectionVariables.set('openapi', JSON.stringify(response.schema.schema));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "7f603fc9-1775-481a-abab-338148732639",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "X-API-Key",
                                "value": "{{postmanAPIKey}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}",
                            "protocol": "https",
                            "host": [
                                "api",
                                "getpostman",
                                "com"
                            ],
                            "path": [
                                "apis",
                                "{{apiId}}",
                                "versions",
                                "{{apiVersionId}}",
                                "schemas",
                                "{{schemaId}}"
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "id": "e5bbb7e7-4f97-4d8d-b3ef-96c8c68ebeac",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "0eb3cc5e-d14f-4a52-a659-5db5f7031026",
                        "type": "text/javascript",
                        "exec": [
                            "const requiredVariables = [",
                            "  'kubeBaseUrl',",
                            "  'o2kBaseUrl',",
                            "  'apiId',",
                            "  'apiVersionId',",
                            "  'schemaId',",
                            "  'postmanAPIKey'",
                            "];",
                            "",
                            "const missingVars = requiredVariables.filter((item) => {",
                            "  const v = pm.variables.get(item);",
                            "  return !v || v[0] === '<';",
                            "});",
                            "",
                            "if (missingVars.length) {",
                            "  const message = [",
                            "    `The following variables are required: ${missingVars.join(', ')}.`,",
                            "    'They can be set under the Variables tab of the Collection.'",
                            "  ].join(' ');",
                            "",
                            "  throw new Error(message);",
                            "}",
                            "",
                            "const resetVars = [",
                            "  'openapi',",
                            "  'kubeResources',",
                            "  'findResourceDefinitionIndex',",
                            "  'currentKubeAPIResource',",
                            "  'currentKubeResource'",
                            "]",
                            "",
                            "for (const item of resetVars) {",
                            "  pm.collectionVariables.set(item, '');",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "858d86bf-12cd-488b-8bd3-8c35ed46a0da",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Run",
            "item": [
                {
                    "name": "Prepare Kubernetes Resources",
                    "item": [
                        {
                            "name": "Convert OpenAPI to Kong for Kubernetes",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "b5bcdb62-c5a1-40ee-bba7-b83a8a200be6",
                                        "exec": [
                                            "const openapi = pm.variables.get('openapi');",
                                            "",
                                            "if (openapi) {",
                                            "  pm.variables.set('openapi', JSON.parse(openapi));",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "77b47414-a5b2-43ce-a3e4-756ad38091a7",
                                        "exec": [
                                            "pm.test('status code is 200', () => {",
                                            "  pm.response.to.have.status(200);",
                                            "});",
                                            "",
                                            "const response = pm.response.json();",
                                            "",
                                            "pm.test('response has length', () => {",
                                            "  pm.expect(response.length).to.be.gt(0);",
                                            "});",
                                            "",
                                            "pm.test('response is JSON', () => {",
                                            "  pm.expect(pm.response.headers.get('Content-Type')).to.match(/^application\\/json/);",
                                            "});",
                                            "",
                                            "const resourcesVar = pm.collectionVariables.set('kubeResources') || '[]';",
                                            "const resources = JSON.parse(resourcesVar);",
                                            "pm.collectionVariables.set('kubeResources', JSON.stringify(resources.concat(response)));",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "d498be89-5265-4a1b-8a1d-7c4022cbfc5b",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "text/yaml",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{{openapi}}",
                                    "options": {
                                        "raw": {
                                            "language": "text"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{o2kBaseUrl}}/openapi-to-kong-converter",
                                    "host": [
                                        "{{o2kBaseUrl}}"
                                    ],
                                    "path": [
                                        "openapi-to-kong-converter"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Fetch Application Resources",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "da538450-d235-4871-ad2c-2c3293b7f7a4",
                                        "exec": [
                                            "pm.test('status code is 200', () => {",
                                            "  pm.response.to.have.status(200);",
                                            "});",
                                            "",
                                            "const response = pm.response.json();",
                                            "",
                                            "pm.test('response has length', () => {",
                                            "  pm.expect(response.length).to.be.gt(0);",
                                            "});",
                                            "",
                                            "pm.test('response is JSON', () => {",
                                            "  pm.expect(pm.response.headers.get('Content-Type')).to.match(/^application\\/json/);",
                                            "});",
                                            "",
                                            "const resourcesVar = pm.collectionVariables.get('kubeResources') || '[]';",
                                            "",
                                            "const resources = JSON.parse(resourcesVar);",
                                            "pm.collectionVariables.set('kubeResources', JSON.stringify(resources.concat(response)));"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "323d0752-2513-495c-beb2-e7bf16d82a96",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{o2kBaseUrl}}/resources",
                                    "host": [
                                        "{{o2kBaseUrl}}"
                                    ],
                                    "path": [
                                        "resources"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "58207477-43ca-45a3-b3eb-4d9e8faccf73",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "3bb383cc-be7b-44fc-b7c3-b4c5f446ebce",
                                "type": "text/javascript",
                                "exec": [
                                    "if (!pm.variables.get('openapi')) {",
                                    "  const message = [",
                                    "    `The following variable is required: openapi.`,",
                                    "    'It can be set under the Variables tab of the Collection',",
                                    "    'or by running the \"Initialize/Get Open API Definition\" request.'",
                                    "  ].join(' ');",
                                    "  ",
                                    "  throw new Error(message);",
                                    "}"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "9177c44d-64b7-494d-8fd1-b9ea310107d9",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Kubernetes",
                    "item": [
                        {
                            "name": "Find Resource Definition",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "5853ccdd-067e-479d-839e-5fabf3749bbe",
                                        "exec": [
                                            "const resourcesVar = pm.variables.get('kubeResources');",
                                            "const indexVar = pm.variables.get('findResourceDefinitionIndex') || '0';",
                                            "",
                                            "if (!resourcesVar) {",
                                            "  throw new Error([",
                                            "    'The following variable is required: kubeResources.',",
                                            "    'Run the \"OpenAPI to Kong/Convert OpenAPI to Kong Config\" request',",
                                            "    'to populate the variable.'",
                                            "  ].join(' '));",
                                            "}",
                                            "",
                                            "const resources = JSON.parse(resourcesVar);",
                                            "const index = Number(indexVar);",
                                            "const resource = resources[index];",
                                            "",
                                            "const apiRoot = resource.apiVersion == 'v1'",
                                            "  ? 'api'",
                                            "  : 'apis';",
                                            "",
                                            "pm.variables.set('apiRoot', apiRoot);",
                                            "pm.variables.set('apiGroupVersion', resource.apiVersion);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "11e9bbfa-4c40-4b88-a17c-45553e4c83df",
                                        "exec": [
                                            "pm.test('status code is 200', () => {",
                                            "  pm.response.to.have.status(200);",
                                            "});",
                                            "",
                                            "const resources = JSON.parse(pm.variables.get('kubeResources'));",
                                            "const index = Number(pm.variables.get('findResourceDefinitionIndex'));",
                                            "",
                                            "const resource = resources[index];",
                                            "const group = pm.response.json();",
                                            "",
                                            "const kubeAPIResource = group.resources.find((item) => {",
                                            "  return item.kind === resource.kind; ",
                                            "});",
                                            "",
                                            "if (!kubeAPIResource) {",
                                            "  throw new Error(`Resource ${resource.kind} isn't available on your Kubernetes API Server.`)",
                                            "}",
                                            "",
                                            "pm.collectionVariables.set('currentKubeAPIResource', JSON.stringify(kubeAPIResource));",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "35e83b19-29e3-4de1-bd95-6bbc8a560529",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{kubeBaseUrl}}/{{apiRoot}}/{{apiGroupVersion}}",
                                    "host": [
                                        "{{kubeBaseUrl}}"
                                    ],
                                    "path": [
                                        "{{apiRoot}}",
                                        "{{apiGroupVersion}}"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Fetch Resource List",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "8ec0a067-9d1e-4d1e-8b3b-2edf8882f406",
                                        "exec": [
                                            "pm.test('status code is 200', () => {",
                                            "  pm.response.to.have.status(200);",
                                            "});",
                                            "",
                                            "const index = Number(pm.variables.get('findResourceDefinitionIndex'));",
                                            "",
                                            "const resources = JSON.parse(pm.variables.get('kubeResources'));",
                                            "const resource = resources[index];",
                                            "const group = pm.response.json();",
                                            "",
                                            "const found = group.items.find((item) => {",
                                            "  return item.metadata.name === resource.metadata.name;",
                                            "});",
                                            "",
                                            "if (found) {",
                                            "  pm.collectionVariables.set('currentKubeResource', JSON.stringify(found));",
                                            "  postman.setNextRequest('Update Kubernetes Resource');",
                                            "} else {",
                                            "  pm.collectionVariables.set('currentKubeResource', '');",
                                            "  postman.setNextRequest('Create Kubernetes Resource');",
                                            "}",
                                            "",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "1eac2284-bd26-4629-bf7d-10cbd4a58469",
                                        "exec": [
                                            "const resourcesVar = pm.variables.get('kubeResources');",
                                            "const indexVar = pm.variables.get('findResourceDefinitionIndex') || '0';",
                                            "",
                                            "if (!resourcesVar) {",
                                            "  throw new Error([",
                                            "    'The following variable is required: kubeResources.',",
                                            "    'Run the \"OpenAPI to Kong/Convert OpenAPI to Kong Config\" request',",
                                            "    'to populate the variable.'",
                                            "  ].join(' '));",
                                            "}",
                                            "",
                                            "const kubeAPIResourceVar = pm.collectionVariables.get('currentKubeAPIResource');",
                                            "",
                                            "if (!kubeAPIResourceVar) {",
                                            "  throw new Error([",
                                            "    'A Kubernetes APIResource has not been set.',",
                                            "    'Use the \"Run/Find Resource Definition\" request to set the variable.'",
                                            "  ].join(' '));",
                                            "}",
                                            "const kubeAPIResource = JSON.parse(kubeAPIResourceVar);",
                                            "",
                                            "const index = Number(indexVar);",
                                            "const resources = JSON.parse(pm.variables.get('kubeResources'));",
                                            "const resource = resources[index];",
                                            "",
                                            "let resourceListPath = `${resource.apiVersion}`;",
                                            "if (kubeAPIResource.namespaced) {",
                                            "  const namespace = pm.variables.get('kubeNamespace') || 'default';",
                                            "  resourceListPath += `/namespaces/${namespace}`;",
                                            "}",
                                            "resourceListPath += `/${kubeAPIResource.name}`;",
                                            "",
                                            "const apiRoot = resource.apiVersion == 'v1'",
                                            "  ? 'api'",
                                            "  : 'apis';",
                                            "",
                                            "pm.variables.set('apiRoot', apiRoot);",
                                            "pm.variables.set('resourceListPath', resourceListPath);",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "1cdd7609-ec13-463e-ac41-fae691f6302e",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{kubeBaseUrl}}/{{apiRoot}}/{{resourceListPath}}",
                                    "host": [
                                        "{{kubeBaseUrl}}"
                                    ],
                                    "path": [
                                        "{{apiRoot}}",
                                        "{{resourceListPath}}"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Create Kubernetes Resource",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "e5a3757e-ee3b-4300-995d-2ba25081b2e9",
                                        "exec": [
                                            "const kubeAPIResourceVar = pm.collectionVariables.get('currentKubeAPIResource');",
                                            "",
                                            "if (!kubeAPIResourceVar) {",
                                            "  throw new Error([",
                                            "    'A Kubernetes APIResource has not been set.',",
                                            "    'Use the \"Run/Find Resource Definition\" request to set the variable.'",
                                            "  ].join(' '));",
                                            "}",
                                            "const kubeAPIResource = JSON.parse(kubeAPIResourceVar);",
                                            "",
                                            "let indexVar = pm.variables.get('findResourceDefinitionIndex');",
                                            "if (!indexVar) {",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', '0');",
                                            "  indexVar = '0';",
                                            "}",
                                            "",
                                            "const index = Number(indexVar);",
                                            "const resources = JSON.parse(pm.variables.get('kubeResources'));",
                                            "const resource = resources[index];",
                                            "",
                                            "if (index >= resources.length) {",
                                            "  throw new Error('Index is greater than the number of Kubernetes resources.  Consider resetting it to 0 in the collection variables.')",
                                            "}",
                                            "",
                                            "let resourcePath = `${resource.apiVersion}`;",
                                            "if (kubeAPIResource.namespaced) {",
                                            "  const namespace = resource.metadata.namespace ",
                                            "    || pm.variables.get('kubeNamespace')",
                                            "    || 'default';",
                                            "  resourcePath += `/namespaces/${namespace}`;",
                                            "}",
                                            "resourcePath += `/${kubeAPIResource.name}`;",
                                            "",
                                            "pm.variables.set('resourcePath', resourcePath);",
                                            "pm.variables.set('resource', JSON.stringify(resource));",
                                            "",
                                            "const apiRoot = resource.apiVersion == 'v1'",
                                            "  ? 'api'",
                                            "  : 'apis';",
                                            "",
                                            "pm.variables.set('apiRoot', apiRoot);",
                                            "",
                                            "pm.collectionVariables.set('currentKubeAPIResource', '');",
                                            "pm.collectionVariables.set('currentKubeResource', '');",
                                            "",
                                            "if (index === resources.length - 1) {",
                                            "  postman.setNextRequest(null);",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', '0');",
                                            "} else {",
                                            "  postman.setNextRequest('Find Resource Definition');",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', String(index+1));",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "b368f95c-712f-4dcb-a4d0-b0a977269539",
                                        "exec": [
                                            "pm.test('status code is 201', () => {",
                                            "  pm.response.to.have.status(201);",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "8bf88095-8649-48e8-b9d7-d95cd77f2808",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{{resource}}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{kubeBaseUrl}}/{{apiRoot}}/{{resourcePath}}",
                                    "host": [
                                        "{{kubeBaseUrl}}"
                                    ],
                                    "path": [
                                        "{{apiRoot}}",
                                        "{{resourcePath}}"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Kubernetes Resource",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "ecd5dff8-f1bc-48ea-8293-9123e1af8327",
                                        "exec": [
                                            "const kubeAPIResourceVar = pm.collectionVariables.get('currentKubeAPIResource');",
                                            "",
                                            "if (!kubeAPIResourceVar) {",
                                            "  throw new Error([",
                                            "    'A Kubernetes APIResource has not been set.',",
                                            "    'Use the \"Run/Find Resource Definition\" request to set the variable.'",
                                            "  ].join(' '));",
                                            "}",
                                            "const kubeAPIResource = JSON.parse(kubeAPIResourceVar);",
                                            "",
                                            "let indexVar = pm.variables.get('findResourceDefinitionIndex');",
                                            "if (!indexVar) {",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', '0');",
                                            "  indexVar = '0';",
                                            "}",
                                            "",
                                            "const index = Number(indexVar);",
                                            "const resources = JSON.parse(pm.variables.get('kubeResources'));",
                                            "const resource = resources[index];",
                                            "",
                                            "let resourcePath = `${resource.apiVersion}`;",
                                            "if (kubeAPIResource.namespaced) {",
                                            "  const namespace = resource.metadata.namespace ",
                                            "    || pm.variables.get('kubeNamespace')",
                                            "    || 'default';",
                                            "  resourcePath += `/namespaces/${namespace}`;",
                                            "}",
                                            "resourcePath += `/${kubeAPIResource.name}/${resource.metadata.name}`;",
                                            "",
                                            "pm.request.addHeader('Content-Type: application/apply-patch+yaml');",
                                            "pm.variables.set('resourcePath', resourcePath);",
                                            "pm.variables.set('resource', JSON.stringify(resource));",
                                            "",
                                            "const apiRoot = resource.apiVersion == 'v1'",
                                            "  ? 'api'",
                                            "  : 'apis';",
                                            "",
                                            "pm.variables.set('apiRoot', apiRoot);",
                                            "",
                                            "pm.collectionVariables.set('currentKubeAPIResource', '');",
                                            "pm.collectionVariables.set('currentKubeResource', '');",
                                            "",
                                            "if (index === resources.length - 1) {",
                                            "  postman.setNextRequest(null);",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', '0');",
                                            "} else {",
                                            "  postman.setNextRequest('Find Resource Definition');",
                                            "  pm.collectionVariables.set('findResourceDefinitionIndex', String(index+1));",
                                            "}",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "cf8f4586-8db3-4536-8f42-0d8c491cc3ec",
                                        "exec": [
                                            "pm.test('status code is 200', () => {",
                                            "  pm.response.to.have.status(200);",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "id": "b7875537-ba73-436d-8a9b-dc4df9df9472",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "PATCH",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{{resource}}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{kubeBaseUrl}}/{{apiRoot}}/{{resourcePath}}?fieldManager={{fieldManager}}&force={{forceUpdates}}",
                                    "host": [
                                        "{{kubeBaseUrl}}"
                                    ],
                                    "path": [
                                        "{{apiRoot}}",
                                        "{{resourcePath}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "fieldManager",
                                            "value": "{{fieldManager}}"
                                        },
                                        {
                                            "key": "force",
                                            "value": "{{forceUpdates}}"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ],
                    "id": "793b6226-c025-4b71-ab37-2ceac5a0829d",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "233b3dca-bd0d-4f5c-9327-b5390d174f0b",
                                "type": "text/javascript",
                                "exec": [
                                    "const token = pm.variables.get('token');",
                                    "if (token) {",
                                    "  pm.request.addHeader(`Authorization: Bearer ${token}`);",
                                    "}"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "8fd3b281-b9a9-4c30-98d1-0fac00219876",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        }
                    ]
                }
            ],
            "id": "ee319657-77d7-45e4-98fd-f23b377cd16f"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "id": "817971ca-46b4-41e5-bf59-931db556e1c8",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "id": "6f5b2889-f037-4ff9-b9a9-911301cf2fce",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "variable": [
        {
            "id": "fc9d2ccc-148c-4a9e-b6b6-a8eb28a16a4a",
            "key": "kubeBaseUrl",
            "value": "https://kubernetes.default.svc"
        },
        {
            "id": "8c0dfa94-9d0e-4925-b62d-fe61964a05c2",
            "key": "kubeNamespace",
            "value": "default"
        },
        {
            "id": "14352990-f4b8-4115-b873-467c9f263231",
            "key": "o2kBaseUrl",
            "value": "http://localhost:3001"
        },
        {
            "id": "181afd70-72b7-46eb-b079-f256ff68b56f",
            "key": "apiId",
            "value": "<<Only needed in Postman app, not Newman>>"
        },
        {
            "id": "b03acdb6-0807-47cb-87b6-92fdb3e62667",
            "key": "apiVersionId",
            "value": "<<Only needed in Postman app, not Newman>>"
        },
        {
            "id": "5e6ecd06-f952-4499-bf68-34abbf57780b",
            "key": "schemaId",
            "value": "<<Only needed in Postman app, not Newman>>"
        },
        {
            "id": "e142b618-f359-45c9-ab11-711c969d637e",
            "key": "postmanAPIKey",
            "value": "<<Only needed in Postman app, not Newman>>"
        },
        {
            "id": "e1d89f52-e325-4976-bfad-3e16ff2d2f82",
            "key": "fieldManager",
            "value": "PostmanRuntime"
        },
        {
            "id": "51898bef-fc7d-4960-a932-b3b643b0cc41",
            "key": "forceUpdates",
            "value": "true"
        },
        {
            "id": "fc8c9309-6916-4d68-ba63-06a239693575",
            "key": "openapi",
            "value": "<<Set automatically in Postman app>> "
        },
        {
            "id": "9b8cd3a4-129e-4031-a1c2-c84a16096bbf",
            "key": "kubeResources",
            "value": "{}"
        },
        {
            "id": "af71de76-2df4-4347-a274-915f783807ee",
            "key": "findResourceDefinitionIndex",
            "value": "0"
        },
        {
            "id": "8c5b3c5d-e2ed-492e-82ec-6d3ce55d2744",
            "key": "currentKubeAPIResource",
            "value": ""
        },
        {
            "id": "0a762a63-36b8-4b4d-b82c-30f51e3e1791",
            "key": "currentKubeResource",
            "value": ""
        }
    ]
}